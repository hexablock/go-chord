// Code generated by protoc-gen-go.
// source: net.proto
// DO NOT EDIT!

/*
Package chord is a generated protocol buffer package.

It is generated from these files:
	net.proto

It has these top-level messages:
	Vnode
	Response
	VnodeList
	FindSuccReq
	StringParam
	VnodePair
*/
package chord

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import coordinate "github.com/hexablock/go-chord/coordinate"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Vnode struct {
	Id   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host string   `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Meta [][]byte `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Vnode) Reset()                    { *m = Vnode{} }
func (m *Vnode) String() string            { return proto.CompactTextString(m) }
func (*Vnode) ProtoMessage()               {}
func (*Vnode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vnode) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Vnode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Vnode) GetMeta() [][]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

// Generic response fields are available based on the type of response
type Response struct {
	Coordinate *coordinate.Coordinate `protobuf:"bytes,1,opt,name=Coordinate,json=coordinate" json:"Coordinate,omitempty"`
	Ok         bool                   `protobuf:"varint,2,opt,name=Ok,json=ok" json:"Ok,omitempty"`
	Vnode      *Vnode                 `protobuf:"bytes,3,opt,name=Vnode,json=vnode" json:"Vnode,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetCoordinate() *coordinate.Coordinate {
	if m != nil {
		return m.Coordinate
	}
	return nil
}

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetVnode() *Vnode {
	if m != nil {
		return m.Vnode
	}
	return nil
}

type VnodeList struct {
	Vnodes []*Vnode `protobuf:"bytes,1,rep,name=vnodes" json:"vnodes,omitempty"`
}

func (m *VnodeList) Reset()                    { *m = VnodeList{} }
func (m *VnodeList) String() string            { return proto.CompactTextString(m) }
func (*VnodeList) ProtoMessage()               {}
func (*VnodeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VnodeList) GetVnodes() []*Vnode {
	if m != nil {
		return m.Vnodes
	}
	return nil
}

type FindSuccReq struct {
	VN    *Vnode `protobuf:"bytes,1,opt,name=VN,json=vN" json:"VN,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Key   []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *FindSuccReq) Reset()                    { *m = FindSuccReq{} }
func (m *FindSuccReq) String() string            { return proto.CompactTextString(m) }
func (*FindSuccReq) ProtoMessage()               {}
func (*FindSuccReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FindSuccReq) GetVN() *Vnode {
	if m != nil {
		return m.VN
	}
	return nil
}

func (m *FindSuccReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FindSuccReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type StringParam struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *StringParam) Reset()                    { *m = StringParam{} }
func (m *StringParam) String() string            { return proto.CompactTextString(m) }
func (*StringParam) ProtoMessage()               {}
func (*StringParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StringParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type VnodePair struct {
	Target *Vnode `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Self   *Vnode `protobuf:"bytes,2,opt,name=self" json:"self,omitempty"`
}

func (m *VnodePair) Reset()                    { *m = VnodePair{} }
func (m *VnodePair) String() string            { return proto.CompactTextString(m) }
func (*VnodePair) ProtoMessage()               {}
func (*VnodePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VnodePair) GetTarget() *Vnode {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *VnodePair) GetSelf() *Vnode {
	if m != nil {
		return m.Self
	}
	return nil
}

func init() {
	proto.RegisterType((*Vnode)(nil), "chord.Vnode")
	proto.RegisterType((*Response)(nil), "chord.Response")
	proto.RegisterType((*VnodeList)(nil), "chord.VnodeList")
	proto.RegisterType((*FindSuccReq)(nil), "chord.FindSuccReq")
	proto.RegisterType((*StringParam)(nil), "chord.StringParam")
	proto.RegisterType((*VnodePair)(nil), "chord.VnodePair")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chord service

type ChordClient interface {
	ListVnodesServe(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*VnodeList, error)
	PingServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error)
	NotifyServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*VnodeList, error)
	GetPredecessorServe(ctx context.Context, in *Vnode, opts ...grpc.CallOption) (*Response, error)
	FindSuccessorsServe(ctx context.Context, in *FindSuccReq, opts ...grpc.CallOption) (*VnodeList, error)
	ClearPredecessorServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error)
	SkipSuccessorServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error)
	GetCoordinateServe(ctx context.Context, in *Vnode, opts ...grpc.CallOption) (*Response, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) ListVnodesServe(ctx context.Context, in *StringParam, opts ...grpc.CallOption) (*VnodeList, error) {
	out := new(VnodeList)
	err := grpc.Invoke(ctx, "/chord.chord/ListVnodesServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) PingServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/chord.chord/PingServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) NotifyServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*VnodeList, error) {
	out := new(VnodeList)
	err := grpc.Invoke(ctx, "/chord.chord/NotifyServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetPredecessorServe(ctx context.Context, in *Vnode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/chord.chord/GetPredecessorServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessorsServe(ctx context.Context, in *FindSuccReq, opts ...grpc.CallOption) (*VnodeList, error) {
	out := new(VnodeList)
	err := grpc.Invoke(ctx, "/chord.chord/FindSuccessorsServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) ClearPredecessorServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/chord.chord/ClearPredecessorServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) SkipSuccessorServe(ctx context.Context, in *VnodePair, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/chord.chord/SkipSuccessorServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetCoordinateServe(ctx context.Context, in *Vnode, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/chord.chord/GetCoordinateServe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chord service

type ChordServer interface {
	ListVnodesServe(context.Context, *StringParam) (*VnodeList, error)
	PingServe(context.Context, *VnodePair) (*Response, error)
	NotifyServe(context.Context, *VnodePair) (*VnodeList, error)
	GetPredecessorServe(context.Context, *Vnode) (*Response, error)
	FindSuccessorsServe(context.Context, *FindSuccReq) (*VnodeList, error)
	ClearPredecessorServe(context.Context, *VnodePair) (*Response, error)
	SkipSuccessorServe(context.Context, *VnodePair) (*Response, error)
	GetCoordinateServe(context.Context, *Vnode) (*Response, error)
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_ListVnodesServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ListVnodesServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/ListVnodesServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ListVnodesServe(ctx, req.(*StringParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_PingServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VnodePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).PingServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/PingServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).PingServe(ctx, req.(*VnodePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_NotifyServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VnodePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).NotifyServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/NotifyServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).NotifyServe(ctx, req.(*VnodePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetPredecessorServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vnode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessorServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/GetPredecessorServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessorServe(ctx, req.(*Vnode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessorsServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessorsServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/FindSuccessorsServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessorsServe(ctx, req.(*FindSuccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_ClearPredecessorServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VnodePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ClearPredecessorServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/ClearPredecessorServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ClearPredecessorServe(ctx, req.(*VnodePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_SkipSuccessorServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VnodePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).SkipSuccessorServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/SkipSuccessorServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).SkipSuccessorServe(ctx, req.(*VnodePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetCoordinateServe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vnode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetCoordinateServe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.chord/GetCoordinateServe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetCoordinateServe(ctx, req.(*Vnode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVnodesServe",
			Handler:    _Chord_ListVnodesServe_Handler,
		},
		{
			MethodName: "PingServe",
			Handler:    _Chord_PingServe_Handler,
		},
		{
			MethodName: "NotifyServe",
			Handler:    _Chord_NotifyServe_Handler,
		},
		{
			MethodName: "GetPredecessorServe",
			Handler:    _Chord_GetPredecessorServe_Handler,
		},
		{
			MethodName: "FindSuccessorsServe",
			Handler:    _Chord_FindSuccessorsServe_Handler,
		},
		{
			MethodName: "ClearPredecessorServe",
			Handler:    _Chord_ClearPredecessorServe_Handler,
		},
		{
			MethodName: "SkipSuccessorServe",
			Handler:    _Chord_SkipSuccessorServe_Handler,
		},
		{
			MethodName: "GetCoordinateServe",
			Handler:    _Chord_GetCoordinateServe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net.proto",
}

func init() { proto.RegisterFile("net.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x8d, 0xa5, 0x28, 0x44, 0x63, 0xd3, 0x84, 0x49, 0x5b, 0x84, 0xe9, 0x41, 0xa8, 0x3d, 0xf8,
	0x52, 0xb9, 0x4d, 0xa8, 0x21, 0xd0, 0xd2, 0x43, 0xa0, 0xb9, 0x14, 0xd7, 0xac, 0x20, 0x77, 0x59,
	0x9a, 0xc8, 0x8b, 0x6c, 0xad, 0xbb, 0xbb, 0x12, 0xcd, 0x5f, 0xf6, 0x93, 0xca, 0xae, 0x94, 0xd8,
	0x4e, 0x5c, 0x48, 0x4e, 0xde, 0x99, 0xb7, 0x6f, 0xde, 0x7b, 0x3b, 0x16, 0xf8, 0x15, 0xe9, 0x78,
	0x2d, 0x85, 0x16, 0xe8, 0x65, 0x0b, 0x21, 0xf3, 0xe1, 0xa4, 0xe0, 0x7a, 0x51, 0xcf, 0xe3, 0x4c,
	0xac, 0xc6, 0x0b, 0xfa, 0x93, 0xce, 0x97, 0x22, 0x2b, 0xc7, 0x85, 0xf8, 0x68, 0xe1, 0x71, 0x26,
	0x84, 0xcc, 0x79, 0x95, 0x6a, 0x1a, 0x2b, 0x2d, 0xeb, 0x4c, 0xab, 0x96, 0x1e, 0x7d, 0x07, 0xef,
	0xa6, 0x12, 0x39, 0xe1, 0x2b, 0x70, 0x78, 0x1e, 0xf4, 0xc2, 0xde, 0x68, 0xc0, 0x1c, 0x9e, 0x23,
	0xc2, 0xe1, 0x42, 0x28, 0x1d, 0x38, 0x61, 0x6f, 0xe4, 0x33, 0x7b, 0x36, 0xbd, 0x15, 0xe9, 0x34,
	0x70, 0x43, 0x77, 0x34, 0x60, 0xf6, 0x1c, 0x35, 0x70, 0xcc, 0x48, 0xad, 0x45, 0xa5, 0x08, 0x27,
	0x00, 0x57, 0x0f, 0x42, 0x76, 0x56, 0xff, 0xfc, 0x6d, 0xbc, 0xd1, 0x8e, 0x37, 0x28, 0x83, 0x4d,
	0xdb, 0x68, 0xff, 0x2a, 0xad, 0xd2, 0x31, 0x73, 0x44, 0x89, 0x51, 0x67, 0x2a, 0x70, 0xed, 0x88,
	0x41, 0x6c, 0x43, 0xc4, 0xb6, 0xc7, 0xbc, 0xc6, 0xfc, 0x44, 0x9f, 0xc1, 0xb7, 0xf5, 0x4f, 0xae,
	0x34, 0x7e, 0x80, 0x23, 0xdb, 0x55, 0x41, 0x2f, 0x74, 0x9f, 0x30, 0x3a, 0x2c, 0x4a, 0xa0, 0xff,
	0x83, 0x57, 0x79, 0x52, 0x67, 0x19, 0xa3, 0xdf, 0xf8, 0x0e, 0x9c, 0x9b, 0x69, 0xe7, 0x72, 0x97,
	0xe0, 0x34, 0x53, 0x7c, 0x0d, 0x5e, 0x26, 0xea, 0xaa, 0x7d, 0x00, 0x8f, 0xb5, 0x05, 0x9e, 0x82,
	0x5b, 0xd2, 0x9d, 0xf5, 0x35, 0x60, 0xe6, 0x18, 0xbd, 0x87, 0x7e, 0xa2, 0x25, 0xaf, 0x8a, 0x59,
	0x2a, 0xd3, 0x95, 0xa1, 0x35, 0xe9, 0xb2, 0x6e, 0xd3, 0xfb, 0xac, 0x2d, 0xa2, 0xa4, 0x33, 0x3b,
	0x4b, 0xb9, 0x34, 0x66, 0x75, 0x2a, 0x0b, 0xd2, 0x7b, 0xb5, 0x3b, 0x0c, 0x43, 0x38, 0x54, 0xb4,
	0xbc, 0xb5, 0xf2, 0x8f, 0xef, 0x58, 0xe4, 0xfc, 0xaf, 0x0b, 0xed, 0xf2, 0xf1, 0x12, 0x4e, 0xcc,
	0x33, 0x58, 0x50, 0x25, 0x24, 0x1b, 0x42, 0xec, 0x08, 0x5b, 0xde, 0x86, 0xa7, 0xdb, 0x43, 0x0c,
	0x21, 0x3a, 0xc0, 0x4f, 0xe0, 0xcf, 0x78, 0x55, 0xb4, 0xa4, 0x9d, 0x0b, 0xc6, 0xeb, 0xf0, 0xa4,
	0xeb, 0xdc, 0xaf, 0x38, 0x3a, 0xc0, 0x0b, 0xe8, 0x4f, 0x85, 0xe6, 0xb7, 0x77, 0xff, 0xe3, 0xec,
	0x93, 0x99, 0xc0, 0xd9, 0x35, 0xe9, 0x99, 0xa4, 0x9c, 0x32, 0x52, 0x4a, 0xc8, 0x96, 0xbc, 0x13,
	0x6b, 0x9f, 0xd8, 0x37, 0x38, 0xbb, 0x5f, 0x99, 0xa5, 0x3d, 0x4a, 0xb7, 0xb5, 0xce, 0xbd, 0xb2,
	0x5f, 0xe1, 0xcd, 0xd5, 0x92, 0x52, 0xf9, 0x44, 0xf8, 0x59, 0x49, 0x2f, 0x01, 0x93, 0x92, 0xaf,
	0x1f, 0xc4, 0x5f, 0x40, 0xfd, 0x02, 0x78, 0x4d, 0x7a, 0xf3, 0x77, 0x7f, 0x5e, 0xdc, 0xf9, 0x91,
	0xfd, 0x28, 0x2f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xe2, 0xbd, 0xcd, 0xe0, 0x03, 0x00,
	0x00,
}
